/*
 * This file is part of COMPASS. It is subject to the license terms in
 * the LICENSE file found in the top-level directory of this distribution.
 * (Also available at http://www.apache.org/licenses/LICENSE-2.0.txt)
 * You may not use this file except in compliance with the License.
 */
package de.dfki.asr.compass.web.backingbeans.project;

import de.dfki.asr.compass.web.backingbeans.CompassBean;
import de.dfki.asr.compass.business.events.EntityChangedEvent;
import de.dfki.asr.compass.business.events.EntityCreatedEvent;
import de.dfki.asr.compass.business.events.EntityDeletedEvent;
import de.dfki.asr.compass.model.Project;
import de.dfki.asr.compass.model.Scenario;
import de.dfki.asr.compass.business.queries.ProjectQueries;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.enterprise.context.SessionScoped;
import javax.enterprise.event.Observes;
import javax.enterprise.event.Reception;
import javax.inject.Inject;
import javax.inject.Named;
import org.jboss.logging.Logger;

/**
 * The prefix "inUISelectedXYZ" means, that the instance handed over to this function may come from the UI, and thus may
 * be generated by the "XYZFacesStringConverter". Hence, one can only rely on the id of this object and it is not
 * managed by the entity manager.
 */
@Named
@SessionScoped
public class OpenScenarioBean extends CompassBean implements Serializable {

	private static final long serialVersionUID = 181147082297722948L;

	@Inject
	protected Logger log;

	@Inject
	protected transient ProjectQueries projectQueries;

	protected List<Project> projectList;
	protected List<Scenario> scenarioList;

	protected Project selectedProject;

	protected Scenario selectedScenario;

	@PostConstruct
	public void startProjectSelection() {
		fetchProjects();
		scenarioList = new ArrayList<>();
		if (!projectList.isEmpty()) {
			setSelectedProject(projectList.get(0));
		}
	}

	public void fetchProjects() {
		log.debug("Updating project list");
		projectList = projectQueries.getAllSortedAscendingByName();
	}

	public void setSelectedProject(Project inUISelectedProject) {
		if (inUISelectedProject == null) {
			selectedProject = null;
			selectedScenario = null;
			scenarioList.clear();
			return;
		}
		if (projectList.contains(inUISelectedProject)) {
			selectedProject = convertUIProjectToRealProject(inUISelectedProject);
			setScenarioListFromSelectedProject();
			selectFirstScenario();
			log.debug("Selected new project " + selectedProject);
		}
	}

	public List<Scenario> getScenarioList() {
		return Collections.unmodifiableList(scenarioList);
	}

	public Scenario getSelectedScenario() {
		return selectedScenario;
	}

	public List<Project> getProjectList() {
		return Collections.unmodifiableList(projectList);
	}

	public Project getSelectedProject() {
		return selectedProject;
	}

	private Project convertUIProjectToRealProject(Project ui) {
		return projectList.get(projectList.indexOf(ui));
	}

	private void setScenarioListFromSelectedProject() {
		List<Scenario> originalList = selectedProject.getScenarios();
		scenarioList = new ArrayList<>(originalList);
		Collections.sort(scenarioList, Scenario.Comparators.NAME);
	}

	private void selectFirstScenario() {
		if (scenarioList.isEmpty()) {
			setSelectedScenario(null);
		} else {
			setSelectedScenario(scenarioList.get(0));
		}
	}

	public void setSelectedScenario(Scenario inUIselectedScenario) {
		if (inUIselectedScenario == null || selectedProject == null) {
			selectedScenario = null; // no scenario present
			return;
		}
		if (scenarioList.contains(inUIselectedScenario)) {
			selectedScenario = convertUIScenarioToRealScenario(inUIselectedScenario);
			log.debug("Selected new scenario " + selectedScenario);
		}
	}

	private Scenario convertUIScenarioToRealScenario(Scenario ui) {
		return scenarioList.get(scenarioList.indexOf(ui));
	}

	public void handleEntityChanged(@Observes(notifyObserver = Reception.IF_EXISTS) EntityChangedEvent event) {
		if (event.target instanceof Project) {
			handleProjectChanged((Project) event.target);
		} else if (event.target instanceof Scenario) {
			handleScenarioChanged((Scenario) event.target);
		}
	}

	public void handleEntityCreated(@Observes(notifyObserver = Reception.IF_EXISTS) EntityCreatedEvent event) {
		if (event.target instanceof Project) {
			handleProjectCreated((Project) event.target);
		} else if (event.target instanceof Scenario) {
			handleScenarioCreated((Scenario) event.target);
		}
	}

	public void handleEntityDeleted(@Observes(notifyObserver = Reception.IF_EXISTS) EntityDeletedEvent event) {
		if (event.target instanceof Project) {
			handleProjectDeleted((Project) event.target);
		} else if (event.target instanceof Scenario) {
			handleScenarioDeleted((Scenario) event.target);
		}
	}

	public void handleProjectCreated(Project project) {
		fetchProjects();
		setSelectedProject(project);
	}

	public void handleProjectDeleted(Project project) {
		fetchProjects();
		if (projectList.isEmpty()) {
			setSelectedProject(null);
		} else {
			setSelectedProject(projectList.get(0));
		}
	}

	public void handleScenarioCreated(Scenario scenario) {
		setScenarioListFromSelectedProject();
		setSelectedScenario(scenario);
	}

	public void handleScenarioDeleted(Scenario scenario) {
		setScenarioListFromSelectedProject();
		selectFirstScenario();
	}

	public void handleProjectChanged(Project project) {
		setScenarioListFromSelectedProject();
	}

	public void handleScenarioChanged(Scenario scenario) {

	}

	public String openScenario() {
		return getRedirectURL("/editor/editor.xhtml");
	}
}
